/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export type paths = {
    "/v1/health": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Liveness
         * @description Readiness/liveness endpoint.
         */
        get: operations["healthCheck"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/reports/permits": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Permit rollup by filters
         * @description Retrieve aggregated permit data filtered by geographic, temporal, and status parameters.
         */
        get: operations["getPermitReports"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/search/hybrid": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Hybrid search across structured and unstructured sources
         * @description Perform vector-based search across multiple data sources with optional department filtering.
         */
        get: operations["hybridSearch"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
};
export type webhooks = Record<string, never>;
export type components = {
    schemas: {
        Problem: {
            type: string;
            title: string;
            status: number;
            detail?: string;
            instance?: string;
        };
        PermitItem: {
            id: string;
            address?: string;
            status?: string;
            sources?: string[];
            provenance?: {
                system?: string;
                /** Format: date-time */
                retrieved_at?: string;
                license?: string;
            };
            freshness?: number;
            trust_score?: number;
        };
        HybridItem: {
            id: string;
            title?: string;
            sources?: string[];
            provenance?: {
                system?: string;
                /** Format: date-time */
                retrieved_at?: string;
                license?: string;
            };
            freshness?: number;
            trust_score?: number;
        };
        Meta: {
            correlationId?: string;
            page?: number;
            limit?: number;
            /** Format: date-time */
            stale_at?: string;
        };
    };
    responses: {
        /** @description Unauthorized */
        Error401: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/problem+json": components["schemas"]["Problem"];
            };
        };
        /** @description Too Many Requests */
        Error429: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/problem+json": components["schemas"]["Problem"];
            };
        };
        /** @description Internal Server Error */
        Error500: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/problem+json": components["schemas"]["Problem"];
            };
        };
    };
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
};
export type $defs = Record<string, never>;
export interface operations {
    healthCheck: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ok?: boolean;
                        /** Format: date-time */
                        time?: string;
                    };
                };
            };
        };
    };
    getPermitReports: {
        parameters: {
            query?: {
                /** @description Geo filter (WKT/bbox) */
                geo?: string;
                from?: string;
                to?: string;
                status?: string;
                page?: number;
                limit?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["PermitItem"][];
                        meta?: components["schemas"]["Meta"];
                    };
                };
            };
            401: components["responses"]["Error401"];
            429: components["responses"]["Error429"];
            500: components["responses"]["Error500"];
        };
    };
    hybridSearch: {
        parameters: {
            query: {
                q: string;
                department?: string;
                page?: number;
                limit?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["HybridItem"][];
                        meta?: components["schemas"]["Meta"];
                    };
                };
            };
            401: components["responses"]["Error401"];
            429: components["responses"]["Error429"];
            500: components["responses"]["Error500"];
        };
    };
}
