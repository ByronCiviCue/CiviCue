# Task ID: 28
# Title: Implement ingest job (jobs/ingest-branch.ts)
# Status: pending
# Dependencies: 69
# Priority: high
# Description: Create a job to ingest data from a branch into the core items tables.
# Details:
Create the `jobs/ingest-branch.ts` script. It should read activated data from a branch, `upsert` records into the `core.items` table, and trigger a subsequent job or function to generate embeddings for new/updated items.

# Test Strategy:
Integration test that runs the job against a small, known dataset from a branch. Verify that the `core.items` table is correctly populated and that the embedding generation process is triggered.

# Subtasks:
## 1. Create job infrastructure and CLI interface [pending]
### Dependencies: None
### Description: Establish the foundational job infrastructure with CLI interface, configuration management, database connections, and advisory locking to prevent concurrent job execution.
### Details:
Create jobs/ directory structure, implement CLI argument parsing for branch selection and options (dry-run, batch-size), establish database connection using existing Kysely instance, implement advisory locking mechanism to prevent concurrent job runs, add logging infrastructure with correlation IDs, and create basic job configuration schema.

## 2. Implement paginated data reader with resume capability [pending]
### Dependencies: 28.1
### Description: Build a robust data reader that can paginate through branch data with cursor-based resume capability and comprehensive validation.
### Details:
Implement cursor-based pagination to read from activated branch data, add checkpoint persistence to allow job resume on failure, validate data structure against expected schemas using Zod, implement configurable batch sizing for memory management, add data freshness checks and source validation, and create metrics tracking for read operations.

## 3. Build batched upsert system with change detection [pending]
### Dependencies: 28.2
### Description: Create an efficient batched upsert system that can detect changes and perform idempotent operations on the core.items table.
### Details:
Implement batched upsert operations using Kysely's onConflict functionality, add change detection to avoid unnecessary updates, ensure idempotent operations with proper conflict resolution, implement transaction management for batch integrity, add data normalization for address/geo fields, and create provenance stamping with source tracking.

## 4. Create embedding trigger system with queue integration [pending]
### Dependencies: 28.3
### Description: Build the embedding trigger system that queues new/updated items for vector embedding generation with proper status tracking.
### Details:
Implement embedding queue integration for new/updated items, add status tracking for embedding generation pipeline, create batch queueing for efficiency, implement retry logic for failed embedding requests, add embedding model version tracking, and ensure proper cleanup of stale embedding requests.

## 5. Orchestrate workflow with comprehensive testing and monitoring [pending]
### Dependencies: 28.4
### Description: Complete the job orchestration with checkpointing, comprehensive error handling, metrics collection, and full integration testing.
### Details:
Implement complete workflow orchestration with proper error handling and rollback capabilities, add comprehensive metrics collection (items processed, errors, timing), create checkpoint management for job resume, implement graceful shutdown handling, add comprehensive integration tests with known datasets, verify core.items population and embedding trigger functionality, and add monitoring hooks for operational observability.

