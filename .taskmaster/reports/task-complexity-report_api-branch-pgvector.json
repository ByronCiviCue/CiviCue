{
	"meta": {
		"generatedAt": "2025-09-09T19:53:56.095Z",
		"tasksAnalyzed": 46,
		"totalTasks": 64,
		"analysisCount": 46,
		"thresholdScore": 5,
		"projectName": "Taskmaster",
		"usedResearch": true
	},
	"complexityAnalysis": [
		{
			"taskId": 8,
			"taskTitle": "Profile SF datasets",
			"complexityScore": 6,
			"recommendedSubtasks": 5,
			"expansionPrompt": "Break down into: 1) Define input schema and SF Socrata index loader with normalization utilities, 2) Implement statistics aggregator for totals/distributions/top-N lists, 3) Create markdown renderer for human-readable profile output, 4) Build CLI script to generate __docs__/catalogs/sf-socrata-profile.md, 5) Add quality checks, documentation and manual verification",
			"reasoning": "This task involves data processing, statistical analysis, and report generation. The existing subtasks are well-structured and cover the full pipeline from data loading to final output. The complexity is moderate due to data normalization, aggregation logic, and markdown formatting requirements."
		},
		{
			"taskId": 10,
			"taskTitle": "Profile Detroit datasets and compare with SF",
			"complexityScore": 7,
			"recommendedSubtasks": 5,
			"expansionPrompt": "Expand into: 1) Define profiling metrics and Detroit markdown template aligned with SF profile, 2) Implement Socrata catalog loaders and normalization for Detroit and SF indexes, 3) Build Detroit catalog profiler to compute summary metrics, 4) Implement Detroit vs SF delta analysis for comparative metrics, 5) Generate detroit-socrata-profile.md via CLI with comparison sections",
			"reasoning": "This builds on Task 8 but adds complexity with cross-catalog comparison logic and delta analysis. Requires handling two data sources, computing comparative metrics like Jaccard indices, and generating unified reports. The comparison aspect increases the complexity beyond simple profiling."
		},
		{
			"taskId": 19,
			"taskTitle": "Generator script: pnpm gen:branch",
			"complexityScore": 5,
			"recommendedSubtasks": 5,
			"expansionPrompt": "Break into: 1) Define scaffolding spec and create standard templates (design.md.hbs, index.ts.hbs, index.test.ts.hbs), 2) Implement CLI to collect inputs, validate branch slug, and prepare template payload, 3) Add template rendering and file generation with safety/formatting, 4) Wire up pnpm script, dependencies and developer docs, 5) Create automated tests and CI verification for the generator",
			"reasoning": "This is a code generation tool requiring template design, CLI interface, file system operations, and validation. Moderate complexity due to template engine integration, input validation, and ensuring generated code is lint-free and follows conventions."
		},
		{
			"taskId": 11,
			"taskTitle": "SocrataAdapter: SoQL translation",
			"complexityScore": 6,
			"recommendedSubtasks": 5,
			"expansionPrompt": "Split into: 1) Define query types and adapter method contract with SocrataQuery interface, 2) Implement clause serialization utilities for each SoQL component ($select, $where, $order, $limit, $offset), 3) Build URL-encoded query string assembler with deterministic parameter order, 4) Integrate builder into SocrataAdapter with proper error handling, 5) Add comprehensive unit tests covering edge cases and validation",
			"reasoning": "Query translation requires careful handling of SQL-like syntax, URL encoding, parameter validation, and edge cases. The complexity comes from supporting multiple query clause types, proper escaping, and ensuring the generated SoQL is valid and secure."
		},
		{
			"taskId": 13,
			"taskTitle": "SocrataAdapter: I/O policy (timeouts, retries, backoff)",
			"complexityScore": 8,
			"recommendedSubtasks": 5,
			"expansionPrompt": "Decompose into: 1) Define I/O policy config, error taxonomy and utilities including BackoffConfig and timeout handling, 2) Implement fetchWithTimeout and request context utilities with AbortController, 3) Build retry wrapper with exponential backoff, jitter and Retry-After support, 4) Integrate retrying I/O into SocrataAdapter for all network calls, 5) Add integration tests with MSW to validate timeouts, retries and backoff behavior",
			"reasoning": "Network resilience is complex, requiring retry logic, exponential backoff algorithms, timeout handling, rate limiting, and proper error classification. The integration testing with mock servers adds additional complexity. This is a high-complexity infrastructure component."
		},
		{
			"taskId": 12,
			"taskTitle": "SocrataAdapter: Zod schemas and runtime validation",
			"complexityScore": 7,
			"recommendedSubtasks": 5,
			"expansionPrompt": "Break down into: 1) Define base Zod schemas for Socrata responses including error handling and row validation, 2) Implement dataset-specific row schema builder with type coercions (numbers, dates, booleans), 3) Integrate validation pipeline into SocrataAdapter fetch flow with fail-fast parsing, 4) Add typed error classes and rich error formatting for validation failures, 5) Create comprehensive tests with mock Socrata responses covering all data types and error scenarios",
			"reasoning": "Runtime validation requires deep understanding of Socrata data types, error handling, schema composition, and type coercion. The complexity comes from supporting various data formats, providing meaningful error messages, and ensuring fail-fast behavior while maintaining performance."
		},
		{
			"taskId": 42,
			"taskTitle": "Adopt Socrata type-extraction outputs",
			"complexityScore": 6,
			"recommendedSubtasks": 4,
			"expansionPrompt": "Structure as: 1) Set up directory structure and file naming conventions for src/generated/socrata with proper module exports, 2) Implement barrel index generation with SocrataTypeRegistry and helper functions, 3) Update codegen integration to emit to new location with index regeneration, 4) Add comprehensive testing for runtime behavior, imports, and CI cleanliness verification",
			"reasoning": "This task involves code generation infrastructure, module organization, and registry pattern implementation. Moderate complexity due to TypeScript module system requirements, deterministic code generation, and ensuring proper tree-shaking and imports work correctly."
		},
		{
			"taskId": 9,
			"taskTitle": "Build Detroit Socrata index (optional)",
			"complexityScore": 5,
			"recommendedSubtasks": 5,
			"expansionPrompt": "Expand into: 1) Scaffold Detroit indexer script and configuration mirroring SF structure, 2) Implement paginated fetcher for Detroit Socrata catalog with retry/backoff, 3) Normalize catalog results into Detroit registry entries with deduplication, 4) Assemble and write Detroit registry file with atomic operations, 5) Wire CLI command, documentation and smoke testing",
			"reasoning": "Similar to the SF index builder (Task 7) but with Detroit-specific configuration. Moderate complexity due to API pagination, data normalization, and file I/O operations. The existing subtask structure provides good coverage of the implementation pipeline."
		},
		{
			"taskId": 14,
			"taskTitle": "Seed registry DB (registry.sources, registry.assets)",
			"complexityScore": 5,
			"recommendedSubtasks": 3,
			"expansionPrompt": "Break down this task with a focus on seed registry db (registry.sources, registry.assets).",
			"reasoning": "Automatically added due to missing analysis in AI response."
		},
		{
			"taskId": 15,
			"taskTitle": "Fill normalization-map.md",
			"complexityScore": 5,
			"recommendedSubtasks": 3,
			"expansionPrompt": "Break down this task with a focus on fill normalization-map.md.",
			"reasoning": "Automatically added due to missing analysis in AI response."
		},
		{
			"taskId": 18,
			"taskTitle": "Golden tests for fuse() (dedupe/scoring)",
			"complexityScore": 5,
			"recommendedSubtasks": 3,
			"expansionPrompt": "Break down this task with a focus on golden tests for fuse() (dedupe/scoring).",
			"reasoning": "Automatically added due to missing analysis in AI response."
		},
		{
			"taskId": 20,
			"taskTitle": "Branch engine observability hooks",
			"complexityScore": 5,
			"recommendedSubtasks": 3,
			"expansionPrompt": "Break down this task with a focus on branch engine observability hooks.",
			"reasoning": "Automatically added due to missing analysis in AI response."
		},
		{
			"taskId": 21,
			"taskTitle": "Rate-limit smoke tests (Socrata)",
			"complexityScore": 5,
			"recommendedSubtasks": 3,
			"expansionPrompt": "Break down this task with a focus on rate-limit smoke tests (socrata).",
			"reasoning": "Automatically added due to missing analysis in AI response."
		},
		{
			"taskId": 22,
			"taskTitle": "Implement /v1/health route",
			"complexityScore": 5,
			"recommendedSubtasks": 3,
			"expansionPrompt": "Break down this task with a focus on implement /v1/health route.",
			"reasoning": "Automatically added due to missing analysis in AI response."
		},
		{
			"taskId": 23,
			"taskTitle": "Implement /v1/search/hybrid",
			"complexityScore": 5,
			"recommendedSubtasks": 3,
			"expansionPrompt": "Break down this task with a focus on implement /v1/search/hybrid.",
			"reasoning": "Automatically added due to missing analysis in AI response."
		},
		{
			"taskId": 24,
			"taskTitle": "Implement /v1/reports/permits",
			"complexityScore": 5,
			"recommendedSubtasks": 3,
			"expansionPrompt": "Break down this task with a focus on implement /v1/reports/permits.",
			"reasoning": "Automatically added due to missing analysis in AI response."
		},
		{
			"taskId": 25,
			"taskTitle": "Contract tests vs openapi.yaml",
			"complexityScore": 5,
			"recommendedSubtasks": 3,
			"expansionPrompt": "Break down this task with a focus on contract tests vs openapi.yaml.",
			"reasoning": "Automatically added due to missing analysis in AI response."
		},
		{
			"taskId": 26,
			"taskTitle": "Vector strategy decision document",
			"complexityScore": 5,
			"recommendedSubtasks": 3,
			"expansionPrompt": "Break down this task with a focus on vector strategy decision document.",
			"reasoning": "Automatically added due to missing analysis in AI response."
		},
		{
			"taskId": 27,
			"taskTitle": "Create core.items and core.item_embeddings DB schema",
			"complexityScore": 5,
			"recommendedSubtasks": 3,
			"expansionPrompt": "Break down this task with a focus on create core.items and core.item_embeddings db schema.",
			"reasoning": "Automatically added due to missing analysis in AI response."
		},
		{
			"taskId": 28,
			"taskTitle": "Implement ingest job (jobs/ingest-branch.ts)",
			"complexityScore": 5,
			"recommendedSubtasks": 3,
			"expansionPrompt": "Break down this task with a focus on implement ingest job (jobs/ingest-branch.ts).",
			"reasoning": "Automatically added due to missing analysis in AI response."
		},
		{
			"taskId": 29,
			"taskTitle": "Implement embedding computation and upsert",
			"complexityScore": 5,
			"recommendedSubtasks": 3,
			"expansionPrompt": "Break down this task with a focus on implement embedding computation and upsert.",
			"reasoning": "Automatically added due to missing analysis in AI response."
		},
		{
			"taskId": 30,
			"taskTitle": "Enforce embedding model and dimension guard",
			"complexityScore": 5,
			"recommendedSubtasks": 3,
			"expansionPrompt": "Break down this task with a focus on enforce embedding model and dimension guard.",
			"reasoning": "Automatically added due to missing analysis in AI response."
		},
		{
			"taskId": 31,
			"taskTitle": "Nightly registry rebuild job",
			"complexityScore": 5,
			"recommendedSubtasks": 3,
			"expansionPrompt": "Break down this task with a focus on nightly registry rebuild job.",
			"reasoning": "Automatically added due to missing analysis in AI response."
		},
		{
			"taskId": 32,
			"taskTitle": "Hourly branch ingest schedule",
			"complexityScore": 5,
			"recommendedSubtasks": 3,
			"expansionPrompt": "Break down this task with a focus on hourly branch ingest schedule.",
			"reasoning": "Automatically added due to missing analysis in AI response."
		},
		{
			"taskId": 33,
			"taskTitle": "CI tests: typecheck, lint, unit, golden, contract",
			"complexityScore": 5,
			"recommendedSubtasks": 3,
			"expansionPrompt": "Break down this task with a focus on ci tests: typecheck, lint, unit, golden, contract.",
			"reasoning": "Automatically added due to missing analysis in AI response."
		},
		{
			"taskId": 34,
			"taskTitle": "Collect and expose key metrics",
			"complexityScore": 5,
			"recommendedSubtasks": 3,
			"expansionPrompt": "Break down this task with a focus on collect and expose key metrics.",
			"reasoning": "Automatically added due to missing analysis in AI response."
		},
		{
			"taskId": 35,
			"taskTitle": "Implement CorrelationId in logs",
			"complexityScore": 5,
			"recommendedSubtasks": 3,
			"expansionPrompt": "Break down this task with a focus on implement correlationid in logs.",
			"reasoning": "Automatically added due to missing analysis in AI response."
		},
		{
			"taskId": 36,
			"taskTitle": "Create monitoring dashboards",
			"complexityScore": 5,
			"recommendedSubtasks": 3,
			"expansionPrompt": "Break down this task with a focus on create monitoring dashboards.",
			"reasoning": "Automatically added due to missing analysis in AI response."
		},
		{
			"taskId": 37,
			"taskTitle": "Establish openapi.yaml and integrate Spectral linting into CI",
			"complexityScore": 5,
			"recommendedSubtasks": 3,
			"expansionPrompt": "Break down this task with a focus on establish openapi.yaml and integrate spectral linting into ci.",
			"reasoning": "Automatically added due to missing analysis in AI response."
		},
		{
			"taskId": 38,
			"taskTitle": "Spike: type-extraction scaffold for Socrata adapter (generate TS + Zod from sample payloads)",
			"complexityScore": 5,
			"recommendedSubtasks": 3,
			"expansionPrompt": "Break down this task with a focus on spike: type-extraction scaffold for socrata adapter (generate ts + zod from sample payloads).",
			"reasoning": "Automatically added due to missing analysis in AI response."
		},
		{
			"taskId": 39,
			"taskTitle": "Spike: type-extraction scaffold for CKAN adapter (generate TS + Zod from datastore_search)",
			"complexityScore": 5,
			"recommendedSubtasks": 3,
			"expansionPrompt": "Break down this task with a focus on spike: type-extraction scaffold for ckan adapter (generate ts + zod from datastore_search).",
			"reasoning": "Automatically added due to missing analysis in AI response."
		},
		{
			"taskId": 40,
			"taskTitle": "Spike: type-extraction scaffold for ArcGIS adapter (FeatureServer query → TS + Zod)",
			"complexityScore": 5,
			"recommendedSubtasks": 3,
			"expansionPrompt": "Break down this task with a focus on spike: type-extraction scaffold for arcgis adapter (featureserver query → ts + zod).",
			"reasoning": "Automatically added due to missing analysis in AI response."
		},
		{
			"taskId": 41,
			"taskTitle": "RFC: Type-extraction workflow across adapters (inputs, codegen targets, review gates, integration)",
			"complexityScore": 5,
			"recommendedSubtasks": 3,
			"expansionPrompt": "Break down this task with a focus on rfc: type-extraction workflow across adapters (inputs, codegen targets, review gates, integration).",
			"reasoning": "Automatically added due to missing analysis in AI response."
		},
		{
			"taskId": 43,
			"taskTitle": "Adopt CKAN type-extraction outputs (publish to src/generated/ckan; export index)",
			"complexityScore": 5,
			"recommendedSubtasks": 3,
			"expansionPrompt": "Break down this task with a focus on adopt ckan type-extraction outputs (publish to src/generated/ckan; export index).",
			"reasoning": "Automatically added due to missing analysis in AI response."
		},
		{
			"taskId": 44,
			"taskTitle": "Adopt ArcGIS type-extraction outputs (publish to src/generated/arcgis; export index)",
			"complexityScore": 5,
			"recommendedSubtasks": 3,
			"expansionPrompt": "Break down this task with a focus on adopt arcgis type-extraction outputs (publish to src/generated/arcgis; export index).",
			"reasoning": "Automatically added due to missing analysis in AI response."
		},
		{
			"taskId": 45,
			"taskTitle": "Wire typegen pipeline: scripts/typegen.mjs, npm run typegen:*, CI check",
			"complexityScore": 5,
			"recommendedSubtasks": 3,
			"expansionPrompt": "Break down this task with a focus on wire typegen pipeline: scripts/typegen.mjs, npm run typegen:*, ci check.",
			"reasoning": "Automatically added due to missing analysis in AI response."
		},
		{
			"taskId": 46,
			"taskTitle": "Pre-commit: Block direct edits under src/generated/** and add Do-Not-Edit README",
			"complexityScore": 5,
			"recommendedSubtasks": 3,
			"expansionPrompt": "Break down this task with a focus on pre-commit: block direct edits under src/generated/** and add do-not-edit readme.",
			"reasoning": "Automatically added due to missing analysis in AI response."
		},
		{
			"taskId": 47,
			"taskTitle": "Typegen: Fetch provider schemas into tmp/schema/<provider>/*.json",
			"complexityScore": 5,
			"recommendedSubtasks": 3,
			"expansionPrompt": "Break down this task with a focus on typegen: fetch provider schemas into tmp/schema/<provider>/*.json.",
			"reasoning": "Automatically added due to missing analysis in AI response."
		},
		{
			"taskId": 48,
			"taskTitle": "Typegen: compute fingerprints (sha256) and compare with fingerprints/<provider>/*.sha256",
			"complexityScore": 5,
			"recommendedSubtasks": 3,
			"expansionPrompt": "Break down this task with a focus on typegen: compute fingerprints (sha256) and compare with fingerprints/<provider>/*.sha256.",
			"reasoning": "Automatically added due to missing analysis in AI response."
		},
		{
			"taskId": 49,
			"taskTitle": "Typegen: Generate TS types + Zod schemas into src/generated/<provider>/next",
			"complexityScore": 5,
			"recommendedSubtasks": 3,
			"expansionPrompt": "Break down this task with a focus on typegen: generate ts types + zod schemas into src/generated/<provider>/next.",
			"reasoning": "Automatically added due to missing analysis in AI response."
		},
		{
			"taskId": 50,
			"taskTitle": "Typegen: compatibility check (current vs next) and adoption gate",
			"complexityScore": 5,
			"recommendedSubtasks": 3,
			"expansionPrompt": "Break down this task with a focus on typegen: compatibility check (current vs next) and adoption gate.",
			"reasoning": "Automatically added due to missing analysis in AI response."
		},
		{
			"taskId": 51,
			"taskTitle": "CI: Add typegen check job with breaking-change override",
			"complexityScore": 5,
			"recommendedSubtasks": 3,
			"expansionPrompt": "Break down this task with a focus on ci: add typegen check job with breaking-change override.",
			"reasoning": "Automatically added due to missing analysis in AI response."
		},
		{
			"taskId": 52,
			"taskTitle": "Pre-commit: Block edits to src/generated/** with TYPEGEN_ALLOW override",
			"complexityScore": 5,
			"recommendedSubtasks": 3,
			"expansionPrompt": "Break down this task with a focus on pre-commit: block edits to src/generated/** with typegen_allow override.",
			"reasoning": "Automatically added due to missing analysis in AI response."
		},
		{
			"taskId": 53,
			"taskTitle": "Docs: Approving Type Drift (compatible vs breaking, env flags, adoption workflow)",
			"complexityScore": 5,
			"recommendedSubtasks": 3,
			"expansionPrompt": "Break down this task with a focus on docs: approving type drift (compatible vs breaking, env flags, adoption workflow).",
			"reasoning": "Automatically added due to missing analysis in AI response."
		},
		{
			"taskId": 62,
			"taskTitle": "Socrata Dataset Core (reusable across cities)",
			"complexityScore": 5,
			"recommendedSubtasks": 3,
			"expansionPrompt": "Break down this task with a focus on socrata dataset core (reusable across cities).",
			"reasoning": "Automatically added due to missing analysis in AI response."
		},
		{
			"taskId": 64,
			"taskTitle": "Vectorization strategy and ingestion shaping",
			"complexityScore": 5,
			"recommendedSubtasks": 3,
			"expansionPrompt": "Break down this task with a focus on vectorization strategy and ingestion shaping.",
			"reasoning": "Automatically added due to missing analysis in AI response."
		}
	]
}